USE sakila;
SELECT * FROM actor;
SELECT * FROM address;
SELECT * FROM category;
SELECT * FROM city;
SELECT * FROM country;
SELECT * FROM customer;
SELECT * FROM film;
SELECT * FROM film_actor;
SELECT * FROM film_category;
SELECT * FROM film_text;
SELECT * FROM inventory;
SELECT * FROM language;
SELECT * FROM payment;
SELECT * FROM rental;
SELECT * FROM staff;
SELECT * FROM store;

# CLEANING, UPDATING, MODIFYING

INSERT INTO customer (store_id, first_name, last_name, email, address_id, active)
VALUES (2, "Kerim", "Masovic", "kerim.masovic@gmail.com", 4, 1);

DELETE FROM customer 
WHERE customer_id = 601;

UPDATE customer SET email = "kerim.mas@gmail.com"
WHERE first_name = "Kerim";

ALTER TABLE address
DROP COLUMN location;

ALTER TABLE store
MODIFY last_update DATE;


ALTER TABLE payment
ADD CONSTRAINT amount_must_be_positive CHECK (amount >= 0);

# REVENUE BY MOVIE

SELECT title, 
COUNT(*) AS number_of_times_rented, 
SUM(amount) AS total_revenue, 
date_format(min(rental_date), "%d-%m-%Y") AS first_time_rented,
date_format(max(rental_date), "%d-%m-%Y") AS last_time_rented,
CASE
WHEN SUM(amount) < 30 THEN "Not profitable"
WHEN SUM(amount) < 60 THEN "Medium profitability"
WHEN SUM(amount) < 90 THEN "Relatively profitable"
ELSE "Highly profitable"
END AS profitability,
CASE
WHEN COUNT(*)  < 7 THEN "Not popular"
WHEN COUNT(*)  < 14 THEN "Medium popularity"
WHEN COUNT(*)  < 25 THEN "Relatively popular"
ELSE "Highly popular"
END AS popularity
FROM film
JOIN inventory ON inventory.film_id = film.film_id
JOIN rental ON rental.inventory_id = inventory.inventory_id
JOIN payment ON payment.rental_id = rental.rental_id
GROUP BY title
ORDER BY total_revenue DESC LIMIT 5;

# MOVIES WITH MOST ACTORS

SELECT  CONCAT(SUBSTRING(title,1,10), "...") AS short_title,
 release_year, category.name AS genre,
COUNT(*) AS no_of_actors_in_movie
FROM actor
JOIN film_actor AS fa ON fa.actor_id = actor.actor_id
JOIN film ON film.film_id = fa.film_id
JOIN film_category AS fc ON fc.film_id = film.film_id
JOIN category ON category.category_id = fc.category_id
GROUP BY title
ORDER BY no_of_actors_in_movie DESC;

# Query displays Actors and how many movies they did in each genre and total number of movies they did

SELECT CONCAT(first_name, " ", last_name) AS actor_name, name AS genre,
COUNT(*) AS movies_done_by_actor,
SUM(COUNT(*)) OVER(partition by actor.actor_id) AS total_movies_by_this_actor
FROM actor
JOIN film_actor AS fa ON fa.actor_id = actor.actor_id
JOIN film ON film.film_id = fa.film_id
JOIN film_category AS fc ON fc.film_id = film.film_id
JOIN category ON category.category_id = fc.category_id
GROUP BY actor.actor_id, genre
ORDER BY total_movies_by_this_actor DESC, actor_name;

# MOVIES BY STAFF

CREATE VIEW staff_2 AS 
SELECT 
CONCAT(first_name, " ", last_name) AS staff_name, title, count(*) AS rents_per_movie,
SUM(count(*)) OVER(partition by staff.staff_id)  AS total_number_of_rents
FROM film
JOIN inventory ON inventory.film_id = film.film_id
JOIN rental ON rental.inventory_id = inventory.inventory_id
JOIN staff ON staff.staff_id = rental.staff_id
GROUP BY staff.staff_id, title
ORDER BY staff_name DESC, count(*) DESC;

# Highest renting movie by the staff

SELECT * FROM staff_2
WHERE rents_per_movie = (SELECT max(rents_per_movie))
GROUP BY staff_name;

# Revenue generated by staff

SELECT CONCAT(first_name, " ", last_name) AS staff_name , SUM(amount) AS revenue_generated,
CONCAT_WS(" - ", store.store_id, city, country) AS Store_id_city_country
FROM payment
LEFT JOIN staff ON staff.staff_id = payment.staff_id
JOIN store ON store.store_id = staff.store_id
JOIN address ON address.address_id = store.address_id
JOIN city ON city.city_id = address.city_id
JOIN country ON country.country_id = city.country_id
GROUP BY staff.staff_id;

# Mike rented more movies but jon generated more revenue

SELECT CAST(payment_date AS DATE) AS payment_date, sum(amount) AS amount
  FROM payment
  GROUP BY CAST(payment_date AS DATE)
  ORDER BY CAST(payment_date AS DATE);


# Where are customers coming from?

SELECT country,
count(*) AS customers_in_country
FROM customer
JOIN address ON address.address_id = customer.address_id
JOIN city ON city.city_id = address.city_id
JOIN country ON country.country_id = city.country_id
GROUP BY country
ORDER BY customers_in_country DESC;
#city
SELECT city, country,
count(*) AS customers_in_city
FROM customer
JOIN address ON address.address_id = customer.address_id
JOIN city ON city.city_id = address.city_id
JOIN country ON country.country_id = city.country_id
GROUP BY city
ORDER BY customers_in_city DESC;

# Since my name is Emir Masovic if would like to se all customers whose name starts with Em OR last name starts with Ma

SELECT * FROM customer
WHERE first_name LIKE "Em%" OR last_name LIKE "Ma%";

SELECT * FROM customer
GROUP BY first_name
HAVING first_name NOT LIKE "Ke%" AND last_name NOT LIKE "%ma%";

# TOP 5 genre

CREATE VIEW genre AS SELECT name AS genre, COUNT(*) AS number_of_movies_made, 
CONCAT(ROUND((COUNT(*)/1000)*100,2), "%") AS percentage_of_total
FROM film
JOIN film_category AS fc ON fc.film_id = film.film_id
JOIN category ON category.category_id = fc.category_id
GROUP BY genre WITH ROLLUP
ORDER BY percentage_of_total DESC ;

SELECT * FROM genre LIMIT 5;

# Active only

SELECT 
CONCAT((COUNT(*)), " ",IF(active = 0, "inactive", "active")) AS active_vs_inactive
FROM customer
GROUP BY active;
